#!/usr/bin/env node

const rl = require('readline');
const chalk = require('chalk')
const args = process.argv

var Client = require('node-rest-client').Client;

var client = new Client();

// usage represents the help guide
const usage = function() {
  const usageText = `
  PWPclient enables to interface with RaceTime Tracker API

  usage:
    client <command>

    commands can be:

    new:      used to create a new event
    get:      used to retrieve your events
    update:   used to update event info
    delete:   used to delete event
    start:    used to start event
    add:      used to add race time
    getTime:  used to get all race times
    help:     used to print the usage guide
  `

  console.log(usageText)
}

// used to log errors to the console in red color
function errorLog(error) {
  const eLog = chalk.red(error)
  console.log(eLog)
}

function prompt(question) {
  const r = rl.createInterface({
    input: process.stdin,
    output: process.stdout,
    terminal: false
  });
  return new Promise((resolve, error) => {
    r.question(question, answer => {
      r.close()
      resolve(answer)
    });
  })
}

function newEvent() {
  var args = {
    data: { "name": "",
          "address": "",
          "date": "",
          "active": true },
    headers: { "Content-Type": "application/json" }
  };

  var q = chalk.blue('Type in event name\n')
  prompt(q).then(name => {
    args.data.name = name

    q = chalk.blue('Type in address\n')
    prompt(q).then(address => {
      args.data.address = address

      q = chalk.blue('Type in date (yyyy-dd-mm)\n')
      prompt(q).then(date => {
        args.data.date = date

        //Post request to API
        client.post("http://localhost:3000/event", args, function (data, response) {
          // parsed response body as js object
          console.log(data);
        });
      })
    })
  })

}

function getEvents() {
  client.get("http://localhost:3000/event", function (data, response) {
    // parsed response body as js object
    console.log(data);
  });
}

function updateEvent() {
  var args = {
    data: { "name": "",
          "address": "",
          "date": "",
          "active": true },
    headers: { "Content-Type": "application/json" }
  };

  var q = chalk.blue('Type in event id to update\n')
  prompt(q).then(id => {
    var id = id

    q = chalk.blue('Type in new event name\n')
    prompt(q).then(name => {
      args.data.name = name

      q = chalk.blue('Type in new address\n')
      prompt(q).then(address => {
        args.data.address = address

        q = chalk.blue('Type in new date (yyyy-dd-mm)\n')
        prompt(q).then(date => {
          args.data.date = date

          //Put request to API
          client.put("http://localhost:3000/event/" + id, args, function (data, response) {
            // parsed response body as js object
            console.log(data);
          });
        })
      })
    })
  })
}

function deleteEvent() {
  var q = chalk.blue('Type in event id to delete\n')
  prompt(q).then(id => {
    var id = id

    //Delete request to API
    client.delete("http://localhost:3000/event/" + id, args, function (data, response) {
      // parsed response body as js object
      console.log(data);
    });
  })
}


function startRace() {
  var q = chalk.blue('Type in event name to start\n')
  prompt(q).then(name => {
    var name = name
    client.get("http://localhost:3000/event/" + name + "/start", function (data, response) {
      // parsed response body as js object
      console.log(data);
    });
  })
}

function addTime() {
  var args = {
    data: { "competitor": "",
          "age": "",
          "time": "" },
    headers: { "Content-Type": "application/json" }
  };

  var q = chalk.blue('Type in event name to add time to\n')
  prompt(q).then(name => {
    var name = name

    q = chalk.blue('Type in competitor\n')
    prompt(q).then(competitor => {
      args.data.competitor = competitor

      q = chalk.blue('Type in competitor age\n')
      prompt(q).then(age => {
        args.data.age = age

        q = chalk.blue('Type in race time\n')
        prompt(q).then(time => {
          args.data.time = time

          //Put request to API
          client.post("http://localhost:3000/event/" + name + "/addTime", args, function (data, response) {
            // parsed response body as js object
            console.log(data);
          });
        })
      })
    })
  })
}

function getRaceTimes() {
  var q = chalk.blue('Type in event name to get times\n')
  prompt(q).then(name => {
    var name = name
    client.get("http://localhost:3000/event/" + name + "/getTimes", function (data, response) {
      // parsed response body as js object
      console.log(data);
    });
  })
}


// we make sure the length of the arguments is exactly three
if (args.length > 3) {
  errorLog(`only one argument can be accepted`)
  usage()
}

switch(args[2]) {
  case 'help':
    usage()
    break
  case 'new':
    newEvent()
    break
  case 'get':
    getEvents()
    break
  case 'update':
    updateEvent();
    break
  case 'delete':
    deleteEvent();
    break
  case 'start':
    startRace();
    break
  case 'add':
    addTime();
    break
  case 'getTimes':
    getRaceTimes();
    break
  default:
    errorLog('invalid command passed')
    usage()
}
